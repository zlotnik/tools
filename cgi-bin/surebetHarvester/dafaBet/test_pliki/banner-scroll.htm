// Generated by CoffeeScript 1.7.1

/**
	Better implementation of the typeof function
	See http://javascript.crockford.com/remedial.html
	@param	{mixed}	Mixed element to determine the typeof
	@return	{string} Type of the element
 */

(function() {
  var dir, log, type, _base, _base1, _base2;

  type = function(obj) {
    var classToType, myClass, name, _i, _len, _ref;
    if (obj === void 0 || obj === null) {
      return String(obj);
    }
    classToType = new Object;
    _ref = "Boolean Number String Function Array Date RegExp".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    myClass = Object.prototype.toString.call(obj);
    if (myClass in classToType) {
      return classToType[myClass];
    }
    return "object";
  };

  log = function(msg, ident) {
    if (ident == null) {
      ident = '';
    }
    if (ident !== '') {
      ident = ident + ': ';
    }
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log("" + ident + msg);
    }
  };

  dir = function(obj) {
    if ((typeof console !== "undefined" && console !== null ? console.dir : void 0) != null) {
      return console.dir(obj);
    }
  };

  if (typeof window !== "undefined" && window !== null) {
    if (window.cjs == null) {
      window.cjs = {};
    }
    if ((_base = window.cjs).type == null) {
      _base.type = type;
    }
    if ((_base1 = window.cjs).log == null) {
      _base1.log = log;
    }
    if ((_base2 = window.cjs).dir == null) {
      _base2.dir = dir;
    }
  } else {
    if (exports.type == null) {
      exports.type = type;
    }
    if (exports.log == null) {
      exports.log = log;
    }
    if (exports.dir == null) {
      exports.dir = dir;
    }
  }

}).call(this);
// Generated by CoffeeScript 1.7.1

/**
	@require Generic functions
 */

(function() {
  var BannerScroll, _base;

  if (typeof window === "undefined" || window === null) {
    (typeof global !== "undefined" && global !== null ? global : window).cjs = require('../generic/generic');
  }

  BannerScroll = (function() {
    BannerScroll.prototype.POSITION_FIXED = 'fixed';

    BannerScroll.prototype.POSITION_ABSOLUTE = 'absolute';

    BannerScroll.prototype.POSITION_STATIC = 'static';

    function BannerScroll(wrapElement, jQuery) {
      this.wrapElement = wrapElement;
      this.jQuery = jQuery;
      this.originWrapElement = this.jQuery(this.wrapElement).clone();
      this.position = null;
      this.originTop = this.getOffsetTop();
      this.isManaged = false;
      this.remanageCallback = function() {};
      this.remanageCallbackEmpty = true;
    }

    BannerScroll.prototype.getOriginWrapElement = function() {
      return this.originWrapElement;
    };

    BannerScroll.prototype.getPosition = function() {
      return this.position;
    };

    BannerScroll.prototype.resetPosition = function() {
      this.jQuery(this.getWrapElement()).css('top', '');
      this.jQuery(this.getWrapElement()).removeClass("fixed-position");
      this.jQuery(this.getWrapElement()).removeClass("absolute-position");
      this.jQuery(this.getWrapElement()).addClass("static-position");
      return this.position = this.POSITION_STATIC;
    };

    BannerScroll.prototype.getWrapElement = function() {
      return this.wrapElement;
    };

    BannerScroll.prototype.setToFixedPosition = function() {
      this.setRemanageCallback((function(context) {
        return function() {
          context.setToFixedPosition();
        };
      })(this));
      if (!this.getIsManaged()) {
        return;
      }
      this.resetPosition();
      this.setPosition(this.POSITION_FIXED);
      return this.jQuery(this.getWrapElement()).addClass("fixed-position");
    };

    BannerScroll.prototype.setToStaticPosition = function() {
      this.setRemanageCallback((function(context) {
        return function() {
          context.setToStaticPosition();
        };
      })(this));
      if (!this.getIsManaged()) {
        return;
      }
      this.resetPosition();
      this.setPosition(this.POSITION_STATIC);
      return this.jQuery(this.getWrapElement()).removeClass("fixed-position");
    };

    BannerScroll.prototype.setToAbsolutePosition = function(top) {
      top = this._calculateAbsoluteTopPosition(top);
      this.jQuery(this.getWrapElement()).css('left', '');
      this.resetPosition();
      this.jQuery(this.getWrapElement()).addClass("absolute-position");
      this.setPosition(this.POSITION_ABSOLUTE);
      return this.jQuery(this.getWrapElement()).css("top", top + "px");
    };

    BannerScroll.prototype.setToAbsolutePositionAnimated = function(top, callback) {
      var $wrapElement, cb;
      top = top + 10;
      $wrapElement = this.jQuery(this.getWrapElement());
      $wrapElement.css('left', '');
      $wrapElement.removeClass("static-position");
      $wrapElement.addClass("absolute-position");
      this.setPosition(this.POSITION_ABSOLUTE);
      top = this._calculateAbsoluteTopPosition(top);
      cb = function() {
        return typeof callback === "function" ? callback() : void 0;
      };
      $wrapElement.css("top", top + "px");
      return cb();
    };

    BannerScroll.prototype._calculateAbsoluteTopPosition = function(top) {
      if (this.getWrapElement().parent().css('position') === 'relative' || this.getWrapElement().parent().css('position') === 'absolute') {
        top -= this.getWrapElement().parent().offset().top;
      }
      return top;
    };

    BannerScroll.prototype.getOffsetTop = function() {
      return this.jQuery(this.getWrapElement()).offset().top;
    };

    BannerScroll.prototype.getHeight = function() {
      return this.jQuery(this.getWrapElement()).outerHeight(true);
    };

    BannerScroll.prototype.setPosition = function(position) {
      this.position = position;
    };

    BannerScroll.prototype.getIsAbsolutePosition = function() {
      return this.position === this.POSITION_ABSOLUTE;
    };

    BannerScroll.prototype.getIsFixedPosition = function() {
      return this.position === this.POSITION_FIXED;
    };

    BannerScroll.prototype.getIsStaticPosition = function() {
      return this.position === this.POSITION_STATIC;
    };

    BannerScroll.prototype.getIsManaged = function() {
      return this.isManaged;
    };

    BannerScroll.prototype.setIsManaged = function(isManaged) {
      this.isManaged = isManaged;
    };

    BannerScroll.prototype.remanage = function() {
      this.setIsManaged(true);
      return this.callRemanageCallback();
    };

    BannerScroll.prototype.setRemanageCallback = function(remanageCallback) {
      this.remanageCallback = remanageCallback;
      return this.remanageCallbackEmpty = false;
    };

    BannerScroll.prototype.getRemanageCallbackEmpty = function() {
      return this.remanageCallbackEmpty;
    };

    BannerScroll.prototype.callRemanageCallback = function() {
      this.remanageCallbackEmpty = true;
      return this.remanageCallback();
    };

    return BannerScroll;

  })();

  if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
    if ((_base = window.cjs).BannerScroll == null) {
      _base.BannerScroll = BannerScroll;
    }
  } else {
    if (exports.BannerScroll == null) {
      exports.BannerScroll = BannerScroll;
    }
  }

}).call(this);
// Generated by CoffeeScript 1.7.1

/**
	@require Generic functions
 */

(function() {
  var BannerScrollManager, _base;

  if (typeof window === "undefined" || window === null) {
    (typeof global !== "undefined" && global !== null ? global : window).cjs = require('../generic/generic');
  }

  BannerScrollManager = (function() {
    function BannerScrollManager(jQuery, _isMobileDeviceGetter) {
      this.jQuery = jQuery;
      this._isMobileDeviceGetter = _isMobileDeviceGetter != null ? _isMobileDeviceGetter : function() {
        return false;
      };
      this.banners = [];
    }

    BannerScrollManager.prototype.addBanner = function(banner) {
      return this.banners.push(banner);
    };

    BannerScrollManager.prototype.getBanners = function() {
      return this.banners;
    };

    BannerScrollManager.prototype.isMobileDevice = function() {
      return this._isMobileDeviceGetter();
    };

    BannerScrollManager.prototype.manage = function() {
      var banner, _i, _len, _ref;
      _ref = this.banners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        banner = _ref[_i];
        this.manageBanner(banner);
      }
    };

    BannerScrollManager.prototype.manageBanner = function(banner) {
      if (banner.bannerObject.getIsManaged()) {
        return;
      }
      banner.bannerObject.setIsManaged(true);
      if (banner.stopElementsOnUpHitTopOfView != null) {
        this.manageStopElementsOnUpHitTopOfView(banner);
      }
      if (banner.startElementsOnDownHitTopOfView != null) {
        this.manageStartElementsOnDownHitTopOfView(banner);
      }
      if (!this.isMobileDevice()) {
        if (banner.stopElementsOnHitByBottom != null) {
          this.manageStopElementsOnHitByBottom(banner);
        }
      } else {
        this.manageMobileAnimation(banner);
      }
      if (banner.fullBannerHeightVisibleOrDisable === true && (banner.minWindowHeight === void 0 || banner.minWindowHeight < banner.bannerObject.getHeight())) {
        banner.minWindowHeight = banner.bannerObject.getHeight();
      }
      if (banner.minWindowHeight != null) {
        this.manageMinWindowHeight(banner);
      }
      if (!this.isMobileDevice() && (banner.leftPositionHandleElement != null)) {
        this.manageLeftPosition(banner);
      }
      this.manageMinWindowHeightOnResize(banner);
    };

    BannerScrollManager.prototype.manageLeftPosition = function(banner) {
      var m;
      m = function(b, context) {
        if (b.bannerObject.getPosition() !== cjs.BannerScroll.prototype.POSITION_ABSOLUTE) {
          context.jQuery(b.bannerObject.getWrapElement()).css('left', context.jQuery(banner.leftPositionHandleElement).offset().left - context.jQuery(window).scrollLeft());
        }
      };
      m(banner, this);
      this.jQuery(window).scroll((function(b, context) {
        return function() {
          return m(b, context);
        };
      })(banner, this));
    };

    BannerScrollManager.prototype.unmanageBanner = function(banner) {
      return banner.bannerObject.setManaged(false);
    };

    BannerScrollManager.prototype.manageMinWindowHeight = function(banner) {
      this.jQuery(window).resize((function(b, context) {
        return function() {
          return context.manageMinWindowHeightOnResize(b);
        };
      })(banner, this));
    };

    BannerScrollManager.prototype.manageMinWindowHeightOnResize = function(banner) {
      var currentPosition, offsetTop;
      if (this.jQuery(window).height() < banner.minWindowHeight && banner.bannerObject.getIsManaged()) {
        currentPosition = banner.bannerObject.getPosition();
        if (currentPosition === null) {
          banner.bannerObject.setIsManaged(false);
          return;
        }
        offsetTop = banner.bannerObject.getOffsetTop();
        banner.bannerObject.setToStaticPosition();
        banner.bannerObject.setRemanageCallback((function(banner, currentPosition, offsetTop) {
          return function() {
            switch (currentPosition) {
              case cjs.BannerScroll.prototype.POSITION_FIXED:
                return banner.bannerObject.setToFixedPosition();
              case cjs.BannerScroll.prototype.POSITION_STATIC:
                return banner.bannerObject.setToStaticPosition();
              case cjs.BannerScroll.prototype.POSITION_ABSOLUTE:
                return banner.bannerObject.setToAbsolutePosition(offsetTop);
            }
          };
        })(banner, currentPosition, offsetTop));
        banner.bannerObject.setIsManaged(false);
      } else if (this.jQuery(window).height() > banner.minWindowHeight && !banner.bannerObject.getIsManaged()) {
        banner.bannerObject.remanage();
      }
      return this.jQuery(window).scroll();
    };

    BannerScrollManager.prototype.manageStopElementsOnUpHitTopOfView = function(banner) {
      var element, _i, _len, _ref, _results;
      _ref = banner.stopElementsOnUpHitTopOfView;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(this.jQuery(element).waypoint((function(that, banner) {
          return function(direction) {
            if (direction === 'up') {
              that.jQuery(banner.bannerObject.getWrapElement()).stop();
              return banner.bannerObject.setToStaticPosition();
            }
          };
        })(this, banner)));
      }
      return _results;
    };

    BannerScrollManager.prototype.manageStartElementsOnDownHitTopOfView = function(banner) {
      var element, _i, _len, _ref, _results;
      _ref = banner.startElementsOnDownHitTopOfView;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(this.jQuery(element).waypoint((function(context, banner) {
          return function(direction) {
            var offsetTop;
            if (direction === 'down' && context.canMove(banner)) {
              if (!context.isMobileDevice()) {
                banner.bannerObject.setToFixedPosition();
                return context.correctPosition(banner);
              } else if (banner.bannerObject.getIsManaged()) {
                offsetTop = context._getOffsetTopForAbsolutePosition(banner);
                return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop);
              }
            }
          };
        })(this, banner)));
      }
      return _results;
    };

    BannerScrollManager.prototype.manageStopElementsOnHitByBottom = function(banner) {
      var element, _i, _len, _ref, _results;
      _ref = banner.stopElementsOnHitByBottom;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(this.jQuery(window).scroll((function(stopElementOnHitByBottom, context, banner) {
          return function() {
            if (banner.bannerObject.getIsFixedPosition()) {
              if (context.jQuery(stopElementOnHitByBottom).offset().top <= (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
                banner.bannerObject.setToAbsolutePosition(context.jQuery(stopElementOnHitByBottom).offset().top - banner.bannerObject.getHeight());
                return context.correctPosition(banner);
              }
            } else if (banner.bannerObject.getIsAbsolutePosition() && context.jQuery(stopElementOnHitByBottom).offset().top > (context.jQuery(window).scrollTop() + banner.bannerObject.getHeight())) {
              return banner.bannerObject.setToFixedPosition();
            }
          };
        })(element, this, banner)));
      }
      return _results;
    };

    BannerScrollManager.prototype.manageMobileAnimation = function(banner) {
      var offsetTop, timer;
      timer = 0;
      offsetTop = banner.bannerObject.getOffsetTop();
      return this.jQuery(window).scroll((function(that, banner) {
        return function() {
          clearTimeout(timer);
          return timer = setTimeout(function() {
            if (!banner.bannerObject.getIsAbsolutePosition()) {
              return;
            }
            offsetTop = that._getOffsetTopForAbsolutePosition(banner);
            return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop);
          }, 250);
        };
      })(this, banner));
    };

    BannerScrollManager.prototype.canMove = function(banner) {
      var element, _i, _len, _ref;
      if (banner.stopElementsOnHitByBottom) {
        _ref = banner.stopElementsOnHitByBottom;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (this.jQuery(element).offset().top <= (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
            return false;
          }
        }
      }
      return true;
    };

    BannerScrollManager.prototype.correctPosition = function(banner) {
      var element, _i, _len, _ref, _results;
      if (banner.stopElementsOnHitByBottom) {
        _ref = banner.stopElementsOnHitByBottom;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (this.jQuery(element).offset().top < (banner.bannerObject.getOffsetTop() + banner.bannerObject.getHeight())) {
            _results.push(banner.bannerObject.setToAbsolutePosition(this.jQuery(element).offset().top - banner.bannerObject.getHeight()));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    BannerScrollManager.prototype.correctPositionsOfAllBanners = function() {
      var banner, _i, _len, _ref, _results;
      _ref = this.getBanners();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        banner = _ref[_i];
        _results.push(this.correctPosition(banner));
      }
      return _results;
    };

    BannerScrollManager.prototype._getBottomBoundaryOffsetTop = function(banner) {
      var element, elementOffsetTop, minOffsetTop, _i, _len, _ref;
      minOffsetTop = this.jQuery('body').height();
      if (banner.stopElementsOnHitByBottom) {
        _ref = banner.stopElementsOnHitByBottom;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          elementOffsetTop = this.jQuery(element).offset().top;
          if (elementOffsetTop < minOffsetTop) {
            minOffsetTop = elementOffsetTop;
          }
        }
      }
      return minOffsetTop;
    };

    BannerScrollManager.prototype._getOffsetTopForAbsolutePosition = function(banner) {
      var bottomBoundary, offsetTop;
      offsetTop = this.jQuery(window).scrollTop();
      bottomBoundary = this._getBottomBoundaryOffsetTop(banner);
      if (bottomBoundary < offsetTop + banner.bannerObject.getHeight()) {
        offsetTop = bottomBoundary - banner.bannerObject.getHeight();
      }
      return offsetTop;
    };

    BannerScrollManager.prototype.refreshWaypoints = function() {
      return this.jQuery.waypoints('refresh');
    };

    return BannerScrollManager;

  })();

  if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
    if ((_base = window.cjs).BannerScrollManager == null) {
      _base.BannerScrollManager = BannerScrollManager;
    }
  } else {
    if (exports.BannerScrollManager == null) {
      exports.BannerScrollManager = BannerScrollManager;
    }
  }

}).call(this);
