.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Encode::GSM0338 3"
.TH Encode::GSM0338 3 "2020-07-25" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Encode::GSM0338 \-\- ETSI GSM 03.38 Encoding
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Encode qw/encode decode/;
\&  $gsm0338 = encode("gsm0338", $unicode); # loads Encode::GSM0338 implicitly
\&  $unicode = decode("gsm0338", $gsm0338); # ditto
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1GSM0338\s0 is for \s-1GSM\s0 handsets. Though it shares alphanumerals with \s-1ASCII,\s0
control character ranges and other parts are mapped very differently,
mainly to store Greek characters.  There are also escape sequences
(starting with 0x1B) to cover e.g. the Euro sign.
.PP
This was once handled by Encode::Bytes but because of all those
unusual specifications, Encode 2.20 has relocated the support to
this module.
.PP
This module implements only \fI\s-1GSM 7\s0 bit Default Alphabet\fR and
\&\fI\s-1GSM 7\s0 bit default alphabet extension table\fR according to standard
3GPP \s-1TS 23.038\s0 version 16. Therefore \fINational Language Single Shift\fR
and \fINational Language Locking Shift\fR are not implemented nor supported.
.SS "Septets"
.IX Subsection "Septets"
This modules operates with octets (like any other Encode module) and not
with packed septets (unlike other \s-1GSM\s0 standards). Therefore for processing
binary \s-1SMS\s0 or parts of \s-1GSM TPDU\s0 payload (3GPP \s-1TS 23.040\s0) it is needed to do
conversion between octets and packed septets. For this purpose perl's \f(CW\*(C`pack\*(C'\fR
and \f(CW\*(C`unpack\*(C'\fR functions may be useful:
.PP
.Vb 2
\&  $bytes = substr(pack(\*(Aq(b*)*\*(Aq, unpack \*(Aq(A7)*\*(Aq, unpack \*(Aqb*\*(Aq, $septets), 0, $num_of_septets);
\&  $unicode = decode(\*(AqGSM0338\*(Aq, $bytes);
\&
\&  $bytes = encode(\*(AqGSM0338\*(Aq, $unicode);
\&  $septets = pack \*(Aqb*\*(Aq, join \*(Aq\*(Aq, map { substr $_, 0, 7 } unpack \*(Aq(A8)*\*(Aq, unpack \*(Aqb*\*(Aq, $bytes;
\&  $num_of_septets = length $bytes;
.Ve
.PP
Please note that for correct decoding of packed septets it is required to
know number of septets packed in binary buffer as binary buffer is always
padded with zero bits and 7 zero bits represents character \f(CW\*(C`@\*(C'\fR. Number
of septets is also stored in \s-1TPDU\s0 payload when dealing with 3GPP \s-1TS 23.040.\s0
.SH "BUGS"
.IX Header "BUGS"
Encode::GSM0338 2.7 and older versions (part of Encode 3.06) incorrectly
handled zero bytes (character \f(CW\*(C`@\*(C'\fR). This was fixed in Encode::GSM0338
version 2.8 (part of Encode 3.07).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
3GPP \s-1TS 23.038\s0 <https://www.3gpp.org/dynareport/23038.htm>
.PP
\&\s-1ETSI TS 123 038 V16.0.0\s0 (2020\-07) <https://www.etsi.org/deliver/etsi_ts/123000_123099/123038/16.00.00_60/ts_123038v160000p.pdf>
.PP
Encode
