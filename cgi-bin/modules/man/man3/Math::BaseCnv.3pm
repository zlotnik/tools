.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::BaseCnv 3"
.TH Math::BaseCnv 3 "2020-09-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::BaseCnv \- basic functions to CoNVert between number Bases
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to version 1.14 of Math::BaseCnv, which was released on Sat Jul 30 06:44:28:46 \-0500 2016.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  #!/usr/bin/perl
\&  use strict;use warnings;use utf8;use v5.10;use Math::BaseCnv;
\&
\&              # CoNVert     63 from base\-10 (decimal) to base\- 2 (binary )
\&  my $binary_\|_63 = cnv(     63 , 10,  2 );
\&              # CoNVert 111111 from base\- 2 (binary ) to base\-16 (HEX    )
\&  my $HEX_\|_\|_\|_\|_63 = cnv( 111111 ,  2, 16 );
\&              # CoNVert     3F from base\-16 (HEX    ) to base\-10 (decimal)
\&  my $decimal_63 = cnv(    \*(Aq3F\*(Aq, 16, 10 );
\&  say "63 dec\->bin $binary_\|_63 bin\->HEX $HEX_\|_\|_\|_\|_63 HEX\->dec $decimal_63";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BaseCnv provides a few simple functions for converting between arbitrary number bases. You're probably better off using Michael Robinton's
Math::Base::Convert benchmarked high-performance Perl modules. Another object syntax for number-base conversion is Ken Williams'
fine Math::BaseCalc module.
.SH "PURPOSE"
.IX Header "PURPOSE"
The reason I created BaseCnv was that I needed a simple way to convert quickly between the 3 number bases I use most (10, 16, and 64). It turned out
that it was trivial to handle any arbitrary number base that is represented as characters. High-bit \s-1ASCII\s0 has proven somewhat problemmatic but at least
BaseCnv can simply and reliably convert between any possible base between 2 and 64 (or 96). I'm happy with it and employ \fBb64()\fR in places I probably
shouldn't now.
.SH "USAGE"
.IX Header "USAGE"
.SS "cnv($numb[,$from[,$tobs]])"
.IX Subsection "cnv($numb[,$from[,$tobs]])"
CoNVert the number contained in \f(CW$numb\fR from its current number base ($from) into the result number base ($tobs).
.PP
\&\fBWhen only \f(CB$numb\fB is provided as a parameter:\fR
.PP
If \f(CW$numb\fR only contains valid decimal (base 10) digits, it will be converted to \s-1HEXADECIMAL\s0 (base 16).
.PP
If \f(CW$numb\fR only contains valid hexadecimal (base 16) digits or begins with '0x', it will be it will be converted to decimal (base 10).
.PP
\&\fBWhen only \f(CB$numb\fB and \f(CB$from\fB are provided as parameters:\fR
.PP
\&\fBcnv()\fR assumes that \f(CW$numb\fR is already in decimal format and uses \f(CW$from\fR as the \f(CW$tobs\fR.
.PP
\&\fBWhen all three parameters are provided:\fR
.PP
The normal (and most clear) usage of \fBcnv()\fR is to provide all three parameters where \f(CW$numb\fR is converted from \f(CW$from\fR base to \f(CW$tobs\fR.
.PP
\&\fBcnv()\fR is the only function that is exported from a normal 'use Math::BaseCnv;' command. The other functions below can be imported to local namespaces
explicitly or with the following tags:
.PP
.Vb 5
\&  :all \- every function described here
\&  :heX \- only cnv(), dec(), heX(), and HEX()
\&  :b64 \- only cnv(), b10(), b64(), and b64sort()
\&  :dig \- only dig() and diginit()
\&  :sfc \- only summ(), fact(), and choo()
.Ve
.SS "b10($b64n)"
.IX Subsection "b10($b64n)"
A shortcut to convert the number given as a parameter ($b64n) from base 64 to decimal (base 10).
.SS "b64($b10n)"
.IX Subsection "b64($b10n)"
A shortcut to convert the number given as a parameter ($b10n) from decimal (base 10) to base 64.
.SS "b64sort(@b64s)"
.IX Subsection "b64sort(@b64s)"
A way to sort b64 strings as though they were decimal numbers.
.SS "dec($b16n)"
.IX Subsection "dec($b16n)"
A shortcut to convert the number given as a parameter ($b16n) from hexadecimal (base 16) to decimal (base 10).
.SS "\s-1HEX\s0($b10n)"
.IX Subsection "HEX($b10n)"
A shortcut to convert the number given as a parameter ($b10n) from decimal (base 10) to \s-1HEXADECIMAL\s0 (base 16) uppercase.
.SS "heX($b10n)"
.IX Subsection "heX($b10n)"
A shortcut to convert the number given as a parameter ($b10n) from decimal (base 10) to hexadecimal (base 16) lowercase.
.PP
Please read the \*(L"\s-1NOTES\*(R"\s0 regarding \fBheX()\fR.
.SS "dig(\e@newd)"
.IX Subsection "dig(@newd)"
Assign the new digit character list to be used in place of the default one. \fBdig()\fR can also alternately accept a string name matching one of the
following predefined digit sets:
.PP
.Vb 10
\&  \*(Aqbin\*(Aq => [\*(Aq0\*(Aq, \*(Aq1\*(Aq],
\&  \*(Aqdna\*(Aq => [\*(Aqa\*(Aq, \*(Aqc\*(Aq, \*(Aqg\*(Aq, \*(Aqt\*(Aq],
\&  \*(AqDNA\*(Aq => [\*(AqA\*(Aq, \*(AqC\*(Aq, \*(AqG\*(Aq, \*(AqT\*(Aq],
\&  \*(Aqoct\*(Aq => [\*(Aq0\*(Aq..\*(Aq7\*(Aq],
\&  \*(Aqdec\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq],
\&  \*(AqheX\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aqa\*(Aq..\*(Aqf\*(Aq],
\&  \*(AqHEX\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(AqA\*(Aq..\*(AqF\*(Aq],
\&  \*(Aqb36\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq],
\&  \*(AqB36\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq],
\&  \*(Aqb62\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq],
\&  \*(Aqb64\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq.\*(Aq, \*(Aq_\*(Aq], # month:C:12 day:V:31
\&  \*(Aqm64\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq+\*(Aq, \*(Aq/\*(Aq], # 0\-63 from MIME::Base64
\&  \*(Aqiru\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq[\*(Aq, \*(Aq]\*(Aq], # P10 server\-server protocol used by IRCu daemon
\&  \*(Aqurl\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq\-\*(Aq, \*(Aq_\*(Aq], # MIME::Base64::URLSafe (avoid %2B %2F expansions)
\&  \*(Aqrgx\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq!\*(Aq, \*(Aq\-\*(Aq], # ReGular eXpression variant
\&  \*(Aqid0\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq_\*(Aq, \*(Aq\-\*(Aq], # IDentifier style 0
\&  \*(Aqid1\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq.\*(Aq, \*(Aq_\*(Aq], # IDentifier style 1
\&  \*(Aqxnt\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq.\*(Aq, \*(Aq\-\*(Aq], # XML Name Tokens (Nmtoken)
\&  \*(Aqxid\*(Aq => [\*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq_\*(Aq, \*(Aq:\*(Aq], # XML identifiers (Name   )
\&  \*(Aqsxl\*(Aq => [\*(Aq?\*(Aq, \*(Aq@\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aq[\*(Aq,\*(Aq\e\e\*(Aq, \*(Aq]\*(Aq, \*(Aq^\*(Aq,  # Sixel Base64 from VT100.Net
\&            \*(Aq_\*(Aq, \*(Aq\`\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq{\*(Aq, \*(Aq|\*(Aq, \*(Aq}\*(Aq, \*(Aq~\*(Aq],
\&  \*(Aqb85\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq!\*(Aq, \*(Aq#\*(Aq,  # RFC 1924 for IPv6 addresses like in Math::Base85
\&            \*(Aq$\*(Aq, \*(Aq%\*(Aq, \*(Aq&\*(Aq, \*(Aq(\*(Aq, \*(Aq)\*(Aq, \*(Aq*\*(Aq, \*(Aq+\*(Aq, \*(Aq\-\*(Aq,
\&            \*(Aq;\*(Aq, \*(Aq<\*(Aq, \*(Aq=\*(Aq, \*(Aq>\*(Aq, \*(Aq?\*(Aq, \*(Aq@\*(Aq, \*(Aq^\*(Aq, \*(Aq_\*(Aq,
\&            \*(Aq\`\*(Aq, \*(Aq{\*(Aq, \*(Aq|\*(Aq, \*(Aq}\*(Aq, \*(Aq~\*(Aq               ],
\&  \*(Aqasc\*(Aq => [\*(Aq \*(Aq, \*(Aq!\*(Aq, \*(Aq"\*(Aq, \*(Aq#\*(Aq, \*(Aq$\*(Aq, \*(Aq%\*(Aq, \*(Aq&\*(Aq, "\*(Aq",  # Base96 7\-bit printable 0x20 (space) \- 0x7F
\&            \*(Aq(\*(Aq, \*(Aq)\*(Aq, \*(Aq*\*(Aq, \*(Aq+\*(Aq, \*(Aq,\*(Aq, \*(Aq\-\*(Aq, \*(Aq.\*(Aq, \*(Aq/\*(Aq,  #   (tilde ~) \*(Aqascii\*(Aq from Math::Base::Convert
\&            \*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(Aq:\*(Aq, \*(Aq;\*(Aq, \*(Aq<\*(Aq, \*(Aq=\*(Aq, \*(Aq>\*(Aq, \*(Aq?\*(Aq,
\&            \*(Aq@\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aq[\*(Aq,\*(Aq\e\e\*(Aq, \*(Aq]\*(Aq, \*(Aq^\*(Aq, \*(Aq_\*(Aq,
\&            \*(Aq\`\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq{\*(Aq, \*(Aq|\*(Aq, \*(Aq}\*(Aq, \*(Aq~\*(Aq     ],
\&  \*(Aqb96\*(Aq => [\*(Aq0\*(Aq..\*(Aq9\*(Aq, \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq, \*(Aq.\*(Aq, \*(Aq_\*(Aq,  # Base96 but starting with b64 characters
\&            \*(Aq \*(Aq, \*(Aq!\*(Aq, \*(Aq"\*(Aq, \*(Aq#\*(Aq, \*(Aq$\*(Aq, \*(Aq%\*(Aq, \*(Aq&\*(Aq, "\*(Aq",
\&            \*(Aq(\*(Aq, \*(Aq)\*(Aq, \*(Aq*\*(Aq, \*(Aq+\*(Aq, \*(Aq,\*(Aq, \*(Aq\-\*(Aq, \*(Aq/\*(Aq, \*(Aq:\*(Aq,
\&            \*(Aq;\*(Aq, \*(Aq<\*(Aq, \*(Aq=\*(Aq, \*(Aq>\*(Aq, \*(Aq?\*(Aq, \*(Aq@\*(Aq, \*(Aq[\*(Aq,\*(Aq\e\e\*(Aq,
\&            \*(Aq]\*(Aq, \*(Aq^\*(Aq, \*(Aq\`\*(Aq, \*(Aq{\*(Aq, \*(Aq|\*(Aq, \*(Aq}\*(Aq, \*(Aq~\*(Aq     ],
.Ve
.PP
If no \e@newd list or digit set name is provided as a parameter, \fBdig()\fR returns the current character list. It's fine to have many more characters
in your current digit set than will be used with your conversions (e.g., using dig('b64') works fine for any \fBcnv()\fR call with \f(CW$from\fR and \f(CW$tobs\fR params
less than or equal to 64).
.PP
An example of a \e@newd parameter for a specified alternate digit set for base 9 conversions is:
.PP
.Vb 1
\&  dig( [ qw( n a c h o z   y u m ) ] );
.Ve
.SS "\fBdiginit()\fP"
.IX Subsection "diginit()"
Resets the used digit list to the initial default order of the predefined digit set: 'b64'. This is simply a shortcut for calling dig('b64') for
reinitialization purposes.
.SS "summ($numb)"
.IX Subsection "summ($numb)"
A simple function to calculate a memoized BigInt summation of \f(CW$numb\fR down to 1.
.SS "fact($numb)"
.IX Subsection "fact($numb)"
A simple function to calculate a memoized BigInt factorial of \f(CW$numb\fR.
.ie n .SS "choo($ennn, $emmm)"
.el .SS "choo($ennn, \f(CW$emmm\fP)"
.IX Subsection "choo($ennn, $emmm)"
A simple function to calculate a memoized BigInt function  of \f(CW$ennn\fR choose \f(CW$emmm\fR.
.SH "NOTES"
.IX Header "NOTES"
The Perl built-in \fBhex()\fR function takes a hex string as a parameter and returns the decimal value (FromBase = 16, ToBase = 10). This notation seems
counter-intuitive to me since I prefer to read the code as though a \fBhex()\fR function will turn your parameter into hexadecimal (i.e., I think \fBhex()\fR should
hexify your parameter but Perl's built-in does not.). I initially decided to invert the notation for my similar functions, but reconsidered the potential
harm possible by introducing exported conflicting opposite behavior into other people's maybe crucial code, so I am falling back on unique casing with \fBheX()\fR.
.PP
My \fBb64()\fR function takes a decimal number as a parameter and returns the base64 equivalent (FromBase = 10, ToBase = 64) and my \fBb10()\fR function takes a base64
number (string) and returns the decimal value (FromBase = 64, ToBase = 10). My \fBheX()\fR function opposes Perl's built-in \fBhex()\fR (which is similar to my \fBdec()\fR).
.PP
Please think of my \fBdec()\fR and \fBheX()\fR functions as meaning decify and heXify. Also the pronunciation of \fBdec()\fR is 'dess' (not 'deck').
.PP
Error checking is minimal.
.PP
This module does not handle fractional number inputs because I like using the dot (.) character as a standard base64 digit since it makes for clean filenames.
.PP
\&\fBsumm()\fR, \fBfact()\fR, and \fBchoo()\fR are general Math function utilities which are unrelated to number-base conversion but I didn't feel like making another
separate module just for them so they snuck in here.
.PP
I hope you find Math::BaseCnv useful. \s-1TTFN.\s0
.SH "CHANGES"
.IX Header "CHANGES"
Revision history for Perl extension Math::BaseCnv:
.IP "\- 1.14 G7UM6iSk  Sat Jul 30 06:44:28:46 \-0500 2016" 2
.IX Item "- 1.14 G7UM6iSk Sat Jul 30 06:44:28:46 -0500 2016"
* synchronized \s-1README\s0 and Changes to updated \s-1POD\s0
.IP "\- 1.12 G7OMKBCn  Sun Jul 24 20:11:12:49 \-0500 2016" 2
.IX Item "- 1.12 G7OMKBCn Sun Jul 24 20:11:12:49 -0500 2016"
* added digit set 'b96' as a reordering of 'asc'
.IP "\- 1.10 G7OMF3ZT  Sun Jul 24 15:03:35:29 \-0500 2016" 2
.IX Item "- 1.10 G7OMF3ZT Sun Jul 24 15:03:35:29 -0500 2016"
* added new digit sets from Math::Base::Convert
.Sp
* switched all old \fBhex()\fR to distinct new \fBheX()\fR and updated \s-1POD\s0 to reflect
.Sp
* fixed \s-1META\s0 license to match \s-1POD\s0 and resolve issue: <\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=60122> (Thanks again xenoterracide.)
.Sp
* removed \s-1PT\s0 from \s-1VERSION\s0 to resolve issue: <\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=60275> (Thanks Alexandr.)
.IP "\- 1.8.B59BrZX  Mon May  9 11:53:35:33 2011" 2
.IX Item "- 1.8.B59BrZX Mon May 9 11:53:35:33 2011"
* updated 'url' digit set to URLSafe to resolve <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=60125> (Thanks xenoterracide.)
.Sp
* updated license copyright years (already had GPLv3)
.IP "\- 1.6.A6FGHKE  Tue Jun 15 16:17:20:14 2010" 2
.IX Item "- 1.6.A6FGHKE Tue Jun 15 16:17:20:14 2010"
* bumped minor version number so they'll keep ascending (without \s-1PT\s0 comprehension)
.IP "\- 1.4.A6FAbEb  Tue Jun 15 10:37:14:37 2010" 2
.IX Item "- 1.4.A6FAbEb Tue Jun 15 10:37:14:37 2010"
* added Math::BigInt code for >64\-bit number-base conversions
.Sp
* added a bunch more DigitSets: IRCu, \s-1URL,\s0 RegEx, identifier variants, \s-1XML\s0 Nmtoken, and \s-1XML ID\s0 Name
.IP "\- 1.4.75O6Pbr  Thu May 24 06:25:37:53 2007" 2
.IX Item "- 1.4.75O6Pbr Thu May 24 06:25:37:53 2007"
* added Test::Pod(::Coverage)? tests and \s-1PREREQ\s0 entries
.Sp
* added b85 for IPv6, generated \s-1META\s0.yml (with needed newline before \s-1EOF\s0) and updated minor version number
.IP "\- 1.2.68J9uJQ  Sat Aug 19 09:56:19:26 2006" 2
.IX Item "- 1.2.68J9uJQ Sat Aug 19 09:56:19:26 2006"
* added \fBb64sort()\fR and put \s-1POD\s0 at bottom
.IP "\- 1.2.59M7mRX  Thu Sep 22 07:48:27:33 2005" 2
.IX Item "- 1.2.59M7mRX Thu Sep 22 07:48:27:33 2005"
* testing Make as primary and BuildPL backup (needing rename for dot)
.IP "\- 1.2.59IBlgw  Sun Sep 18 11:47:42:58 2005" 2
.IX Item "- 1.2.59IBlgw Sun Sep 18 11:47:42:58 2005"
* testing just using Module::Build instead of MakeMaker
.Sp
* fixed test 12 which was failing on \s-1AMD64\s0
.Sp
* added Build.PL to package
.IP "\- 1.2.54HK3pB  Sun Apr 17 20:03:51:11 2005" 2
.IX Item "- 1.2.54HK3pB Sun Apr 17 20:03:51:11 2005"
* removed 128 digit-set since some high-bit characters cause problems on Win32
.Sp
* made bin/cnv only executable to go in \s-1EXE_FILES\s0
.Sp
* made Math::BaseCalc a link in \s-1POD\s0 and updated License
.IP "\- 1.2.45UC8fo  Sun May 30 12:08:41:50 2004" 2
.IX Item "- 1.2.45UC8fo Sun May 30 12:08:41:50 2004"
* tidied \s-1POD\s0 and increased minor version number since \s-1CPAN\s0 can't read \s-1PT\s0 in \s-1VERSION\s0
.IP "\- 1.0.44E9ljP  Wed Apr 14 09:47:45:25 2004" 2
.IX Item "- 1.0.44E9ljP Wed Apr 14 09:47:45:25 2004"
* added test for divide-by-zero error in \fBchoo()\fR
.Sp
* added \fBsumm()\fR
.IP "\- 1.0.446EIbS  Tue Apr  6 14:18:37:28 2004" 2
.IX Item "- 1.0.446EIbS Tue Apr 6 14:18:37:28 2004"
* snuck in \fBfact()\fR and \fBchoo()\fR
.IP "\- 1.0.42REDir  Fri Feb 27 14:13:44:53 2004" 2
.IX Item "- 1.0.42REDir Fri Feb 27 14:13:44:53 2004"
* changed test.pl to hopefully pass MSWin32\-x86\-multi\-thread
.IP "\- 1.0.428LV46  Sun Feb  8 21:31:04:06 2004" 2
.IX Item "- 1.0.428LV46 Sun Feb 8 21:31:04:06 2004"
* broke apart \s-1CHANGES\s0 to descend chronologically
.Sp
* made \fBdec()\fR auto uppercase param since dec(a) was returning 36 instead of 10
.IP "\- 1.0.41M4GMP  Thu Jan 22 04:16:22:25 2004" 2
.IX Item "- 1.0.41M4GMP Thu Jan 22 04:16:22:25 2004"
* put cnv in bin/ as \s-1EXE_FILES\s0
.IP "\- 1.0.418BEPc  Thu Jan  8 11:14:25:38 2004" 2
.IX Item "- 1.0.418BEPc Thu Jan 8 11:14:25:38 2004"
* testing new e auto-generate \s-1MANIFEST\s0(.SKIP)?
.IP "\- 1.0.3CNH37s  Tue Dec 23 17:03:07:54 2003" 2
.IX Item "- 1.0.3CNH37s Tue Dec 23 17:03:07:54 2003"
* updated \s-1POD\s0
.IP "\- 1.0.3CG3dIx  Tue Dec 16 03:39:18:59 2003" 2
.IX Item "- 1.0.3CG3dIx Tue Dec 16 03:39:18:59 2003"
* normalized base spelling
.IP "\- 1.0.3CD1Vdd  Sat Dec 13 01:31:39:39 2003" 2
.IX Item "- 1.0.3CD1Vdd Sat Dec 13 01:31:39:39 2003"
* added \s-1ABSTRACT\s0 section to \fBWriteMakeFile()\fR
.Sp
* changed synopsis example
.Sp
* updated all \s-1POD\s0 indenting
.IP "\- 1.0.3CCA5Mi  Fri Dec 12 10:05:22:44 2003" 2
.IX Item "- 1.0.3CCA5Mi Fri Dec 12 10:05:22:44 2003"
* removed indenting from \s-1POD NAME\s0 field
.IP "\- 1.0.3CB7M43  Thu Dec 11 07:22:04:03 2003" 2
.IX Item "- 1.0.3CB7M43 Thu Dec 11 07:22:04:03 2003"
* updated package to coincide with Time::Fields release
.IP "\- 1.0.39B36Lv  Thu Sep 11 03:06:21:57 2003" 2
.IX Item "- 1.0.39B36Lv Thu Sep 11 03:06:21:57 2003"
* synchronized \s-1POD\s0 with \s-1README\s0 documentation using new e utility
.Sp
* templatized package compilation
.Sp
* fixed boundary bugs
.IP "\- 1.0.37SLNGN  Mon Jul 28 21:23:16:23 2003" 2
.IX Item "- 1.0.37SLNGN Mon Jul 28 21:23:16:23 2003"
* first version (and my first Perl module... yay!) put on \s-1CPAN\s0
.IP "\- 1.0.37JKj3w  Sat Jul 19 20:45:03:58 2003" 2
.IX Item "- 1.0.37JKj3w Sat Jul 19 20:45:03:58 2003"
* reworked interface from shell utility to package
.IP "\- 1.0.3159mLT  Sun Jan  5 09:48:21:29 2003" 2
.IX Item "- 1.0.3159mLT Sun Jan 5 09:48:21:29 2003"
* original version
.SH "TODO"
.IX Header "TODO"
.IP "\- better error checking" 2
.IX Item "- better error checking"
.PD 0
.IP "\- handle fractions and exponents?" 2
.IX Item "- handle fractions and exponents?"
.PD
.SH "INSTALL"
.IX Header "INSTALL"
Please run:
.PP
.Vb 1
\&  \`perl \-MCPAN \-e "install Math::BaseCnv"\`
.Ve
.PP
or uncompress the package and run:
.PP
.Vb 3
\&  \`perl Makefile.PL;       make;       make test;       make install\`
\&    or if you don\*(Aqt have  \`make\` but Module::Build is installed, try:
\&  \`perl    Build.PL; perl Build; perl Build test; perl Build install\`
.Ve
.SH "FILES"
.IX Header "FILES"
Math::BaseCnv requires:
.PP
Math::BigInt          to allow Big \fBsumm()\fR, \fBfact()\fR, and \fBchoo()\fR results
.PP
Memoize               to cache     \fBsumm()\fR, \fBfact()\fR, and \fBchoo()\fR results
.PP
Carp                  to allow errors to \fBcroak()\fR from calling sub
.SH "LICENSE"
.IX Header "LICENSE"
Most source code should be Free! Code I have lawful authority over is and shall be!
Copyright: (c) 2003\-2016, Pip Stuart.
Copyleft :  This software is licensed under the \s-1GNU\s0 General Public License
  (version 3 or later). Please consult <\s-1HTTP://GNU\s0.Org/licenses/gpl\-3.0.txt>
  for important information about your freedom. This is Free Software: you
  are free to change and redistribute it. There is \s-1NO WARRANTY,\s0 to the
  extent permitted by law. See <\s-1HTTP://FSF\s0.Org> for further information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pip Stuart <Pip@CPAN.Org>
