.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::Tidy 3"
.TH XML::Tidy 3 "2017-07-09" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Tidy \- tidy indenting of XML documents
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to version 1.20 of XML::Tidy, which was released on
Sun Jul  9 09:43:30:08 \-0500 2017.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  #!/usr/bin/perl
\&  use strict;use  warnings;
\&  use   utf8;use XML::Tidy;
\&
\&  # create new   XML::Tidy object by loading:  MainFile.xml
\&  my $tidy_obj = XML::Tidy\->new(\*(Aqfilename\*(Aq => \*(AqMainFile.xml\*(Aq);
\&
\&  #   tidy  up  the  indenting
\&     $tidy_obj\->tidy();
\&
\&  #             write out changes back     to  MainFile.xml
\&     $tidy_obj\->write();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module creates \s-1XML\s0 document objects (with inheritance from
XML::XPath) to tidy mixed-content (i.e., non-data) text node
indenting. There are also some other handy member functions to
compress and expand your \s-1XML\s0 document object (into either a
compact \s-1XML\s0 representation or a binary one).
.SH "USAGE"
.IX Header "USAGE"
.SS "\fBnew()\fP"
.IX Subsection "new()"
This is the standard Tidy object constructor. Except for the added
\&'binary' option, it can take the same parameters as an XML::XPath
object constructor to initialize the \s-1XML\s0 document object. These can
be any one of:
.PP
.Vb 5
\&  \*(Aqfilename\*(Aq => \*(AqSomeFile.xml\*(Aq
\&  \*(Aqbinary\*(Aq   => \*(AqSomeBinaryFile.xtb\*(Aq
\&  \*(Aqxml\*(Aq      => $variable_which_holds_a_bunch_of_XML_data
\&  \*(Aqioref\*(Aq    => $file_InputOutput_reference
\&  \*(Aqcontext\*(Aq  => $existing_node_at_specified_context_to_become_new_obj
.Ve
.SS "\fBreload()\fP"
.IX Subsection "reload()"
The \fBreload()\fR member function causes the latest data contained in
a Tidy object to be re-parsed (which re-indexes all nodes).
.PP
This can be necessary after modifications have been made to nodes
which impact the tree node hierarchy because XML::XPath's \fBfind()\fR
member preserves state information which can get out-of-sync.
.PP
\&\fBreload()\fR is probably rarely useful by itself but it is needed by
\&\fBstrip()\fR and \fBprune()\fR so it is exposed as a method in case it comes in
handy for other uses.
.SS "\fBstrip()\fP"
.IX Subsection "strip()"
The \fBstrip()\fR member function searches the Tidy object for all
mixed-content (i.e., non-data) text nodes and empties them out.
This will basically unformat any markup indenting.
.PP
\&\fBstrip()\fR is used by \fBcompress()\fR and \fBtidy()\fR but it is exposed because it
is also worthwhile by itself.
.SS "\fBtidy()\fP"
.IX Subsection "tidy()"
The \fBtidy()\fR member function can take a single optional parameter as
the string that should be inserted for each indent level. Some
examples:
.PP
.Vb 2
\&  # Tidy up indenting with default two  (2) spaces per indent level
\&     $tidy_obj\->tidy();
\&
\&  # Tidy up indenting with         four (4) spaces per indent level
\&     $tidy_obj\->tidy(\*(Aq    \*(Aq);
\&
\&  # Tidy up indenting with         one  (1) tab    per indent level
\&     $tidy_obj\->tidy(\*(Aqtab\*(Aq );
\&
\&  # Tidy up indenting with         two  (2) tabs   per indent level
\&     $tidy_obj\->tidy("\et\et");
.Ve
.PP
The default behavior is to use two (2) spaces for each indent
level. The Tidy object gets all mixed-content (i.e., non-data)
text nodes reformatted to appropriate indent levels according to
tree nesting depth.
.PP
\&\s-1NOTE:\s0 \fBtidy()\fR disturbs some \s-1XML\s0 escapes in whatever ways XML::XPath
does. It has been brought to my attention that these modules also strip
\&\s-1CDATA\s0 tags from \s-1XML\s0 files / data they operate on. Even though
\&\s-1CDATA\s0 tags don't seem very common, I would very much like for them to
work smoothly too. Hopefully the vast majority of files will work fine
and future support for any of the more rare types can be added later.
.PP
Additionally, please take notice that every call to \fBtidy()\fR (as well as
reload, strip, and most other XML::Tidy functions) leak some memory due
to their usage of XPath's findnodes command. This issue was described
helpfully at <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=120296>.
Thanks to Jozef!
.SS "\fBcompress()\fP"
.IX Subsection "compress()"
The \fBcompress()\fR member function calls \fBstrip()\fR on the Tidy object
then creates an encoded comment which contains the names of elements
and attributes as they occurred in the original document. Their
respective element and attribute names are replaced with just the
appropriate index throughout the document.
.PP
\&\fBcompress()\fR can accept a parameter describing which node types to
attempt to shrink down as abbreviations. This parameter should be
a string of just the first letters of each node type you wish to
include as in the following mapping:
.PP
.Vb 6
\&  e = elements
\&  a = attribute   keys
\&  v = attribute values *EXPERIMENTAL*
\&  t = text       nodes *EXPERIMENTAL*
\&  c = comment    nodes *EXPERIMENTAL*
\&  n = namespace  nodes *not\-yet\-implemented*
.Ve
.PP
Attribute values ('v') and text nodes ('t') both seem to work fine
with current tokenization. I've still labeled them \s-1EXPERIMENTAL\s0
because they seem more likely to cause problems than valid element
or attribute key names. I have some bugs in the comment node
compression which I haven't been able to find yet so that one should
be avoided for now. Since these three node types ('vtc')
all require tokenization, they are not included in default compression
('ea'). An example call which includes values and text would be:
.PP
.Vb 1
\&  $tidy_obj\->compress(\*(Aqeavt\*(Aq);
.Ve
.PP
The original document structure (i.e., node hierarchy) is preserved.
\&\fBcompress()\fR significantly reduces the file size of most \s-1XML\s0 documents
for when size matters more than immediate human readability.
\&\fBexpand()\fR performs the opposite conversion.
.SS "\fBexpand()\fP"
.IX Subsection "expand()"
The \fBexpand()\fR member function reads any XML::Tidy::compress comments
from the Tidy object and uses them to reconstruct the document
that was passed to \fBcompress()\fR.
.SS "bcompress('BinaryOutputFilename.xtb')"
.IX Subsection "bcompress('BinaryOutputFilename.xtb')"
The \fBbcompress()\fR member function stores a binary representation of
any Tidy object. The format consists of:
.PP
.Vb 9
\&  0) a null\-terminated version string
\&  1) a byte specifying how many bytes later indices will be
\&  2) the number of bytes from 1 above to designate the total string  count
\&  3) the number of null\-terminated          strings from 2 above
\&  4) the number of bytes from 1 above to designate the total integer count
\&  5) the number of 4\-byte                  integers from 4 above
\&  6) the number of bytes from 1 above to designate the total float   count
\&  7) the number of 8\-byte (double\-precision) floats from 6 above
\&  8) node index sets until the end of the file
.Ve
.PP
Normal node index sets consist of two values. The first is an index
(again the number of bytes long comes from 1) into the three lists as if
they were all linear. The second is a single-byte integer identifying the
node type (using standard \s-1DOM\s0 node type enumerations).
.PP
A few special cases exist in node index sets though. If the index is
null, it is interpreted as a close-element tag (so no accompanying type
value is read). On the other end, when the index is non-zero, the type
value is always read. In the event that the type corresponds to an
attribute or a processing instruction, the next index is read (without
another accompanying type value) in order to complete the data fields
required by those node types.
.PP
\&\s-1NOTE:\s0 Please bear in mind that the encoding of binary integers and floats
only works properly if the values are not surrounded by spaces or other
delimiters and each is contained in its own single node. This is
necessary to enable thorough reconstruction of whitespace from the
original document. I recommend storing every numerical value as an
isolated attribute value or text node without any surrounding whitespace.
.PP
.Vb 9
\&  # Examples which encode all numbers as binary:
\&  <friend name="goodguy" category="15">
\&    <hitpoints>31.255</hitpoints>
\&    <location>
\&      <x>\-15.65535</x>
\&      <y>16383.7</y>
\&      <z>\-1023.63</z>
\&    </location>
\&  </friend>
\&
\&  # Examples which encode all numbers as strings:
\&  <enemy name="badguy" category=" 666 ">
\&    <hitpoints> 2.0 </hitpoints>
\&    <location> 4.0 \-2.0 4.0 </location>
\&  </enemy>
.Ve
.PP
The default file extension is .xtb (for XML::Tidy Binary).
.SS "bexpand('BinaryInputFilename.xtb')"
.IX Subsection "bexpand('BinaryInputFilename.xtb')"
The \fBbexpand()\fR member function reads a binary file which was
previously written from \fBbcompress()\fR. \fBbexpand()\fR is an XML::Tidy
object constructor like \fBnew()\fR so it can be called like:
.PP
.Vb 1
\&  my $xtbo = XML::Tidy\->bexpand(\*(AqBinaryInputFilename.xtb\*(Aq);
.Ve
.SS "\fBprune()\fP"
.IX Subsection "prune()"
The \fBprune()\fR member function takes an XPath location to remove (along
with all attributes and child nodes) from the Tidy object. For
example, to remove all comments:
.PP
.Vb 1
\&  $tidy_obj\->prune(\*(Aq//comment()\*(Aq);
.Ve
.PP
or to remove the third baz (XPath indexing is 1\-based):
.PP
.Vb 1
\&  $tidy_obj\->prune(\*(Aq/foo/bar/baz[3]\*(Aq);
.Ve
.PP
Pruning your \s-1XML\s0 tree is a form of tidying too so it snuck in here. =)
.SS "\fBwrite()\fP"
.IX Subsection "write()"
The \fBwrite()\fR member function can take an optional filename parameter
to write out any changes to the Tidy object. If no parameters
are given, \fBwrite()\fR overwrites the original \s-1XML\s0 document file (if
a 'filename' parameter was given to the constructor).
.PP
\&\fBwrite()\fR will \fBcroak()\fR if no filename can be found to write to.
.PP
\&\fBwrite()\fR can also take a secondary parameter which specifies an XPath
location to be written out as the new root element instead of the
Tidy object's root. Only the first matching element is written.
.SS "\fBtoString()\fP"
.IX Subsection "toString()"
The \fBtoString()\fR member function is almost identical to \fBwrite()\fR except
that it takes no parameters and simply returns the equivalent \s-1XML\s0
string as a scalar. It is a little weird because normally only
XML::XPath::Node objects have a \fBtoString()\fR member but I figure it
makes sense to extend the same syntax to the parent object as well,
since it is a useful option.
.SH "createNode Wrappers"
.IX Header "createNode Wrappers"
The following are just aliases to Node constructors. They'll work with
just the unique portion of the node type as the member function name.
.SS "e() or \fBel()\fP or \fBelem()\fP or \fBcreateElement()\fP"
.IX Subsection "e() or el() or elem() or createElement()"
wrapper for XML::XPath::Node::Element\->\fBnew()\fR
.SS "a() or \fBat()\fP or \fBattr()\fP or \fBcreateAttribute()\fP"
.IX Subsection "a() or at() or attr() or createAttribute()"
wrapper for XML::XPath::Node::Attribute\->\fBnew()\fR
.SS "c() or \fBcm()\fP or \fBcmnt()\fP or \fBcreateComment()\fP"
.IX Subsection "c() or cm() or cmnt() or createComment()"
wrapper for XML::XPath::Node::Comment\->\fBnew()\fR
.SS "t() or \fBtx()\fP or \fBtext()\fP or \fBcreateTextNode()\fP"
.IX Subsection "t() or tx() or text() or createTextNode()"
wrapper for XML::XPath::Node::Text\->\fBnew()\fR
.SS "p() or \fBpi()\fP or \fBproc()\fP or \fBcreateProcessingInstruction()\fP"
.IX Subsection "p() or pi() or proc() or createProcessingInstruction()"
wrapper for XML::XPath::Node::PI\->\fBnew()\fR
.SS "n() or \fBns()\fP or \fBnspc()\fP or \fBcreateNamespace()\fP"
.IX Subsection "n() or ns() or nspc() or createNamespace()"
wrapper for XML::XPath::Node::Namespace\->\fBnew()\fR
.SH "EXPORTED CONSTANTS"
.IX Header "EXPORTED CONSTANTS"
Since they are sometimes needed to compare against, XML::Tidy also
exports the same node constants as XML::XPath::Node (which
correspond to \s-1DOM\s0 values). These include:
.SS "\s-1UNKNOWN_NODE\s0"
.IX Subsection "UNKNOWN_NODE"
.SS "\s-1ELEMENT_NODE\s0"
.IX Subsection "ELEMENT_NODE"
.SS "\s-1ATTRIBUTE_NODE\s0"
.IX Subsection "ATTRIBUTE_NODE"
.SS "\s-1TEXT_NODE\s0"
.IX Subsection "TEXT_NODE"
.SS "\s-1CDATA_SECTION_NODE\s0"
.IX Subsection "CDATA_SECTION_NODE"
.SS "\s-1ENTITY_REFERENCE_NODE\s0"
.IX Subsection "ENTITY_REFERENCE_NODE"
.SS "\s-1ENTITY_NODE\s0"
.IX Subsection "ENTITY_NODE"
.SS "\s-1PROCESSING_INSTRUCTION_NODE\s0"
.IX Subsection "PROCESSING_INSTRUCTION_NODE"
.SS "\s-1COMMENT_NODE\s0"
.IX Subsection "COMMENT_NODE"
.SS "\s-1DOCUMENT_NODE\s0"
.IX Subsection "DOCUMENT_NODE"
.SS "\s-1DOCUMENT_TYPE_NODE\s0"
.IX Subsection "DOCUMENT_TYPE_NODE"
.SS "\s-1DOCUMENT_FRAGMENT_NODE\s0"
.IX Subsection "DOCUMENT_FRAGMENT_NODE"
.SS "\s-1NOTATION_NODE\s0"
.IX Subsection "NOTATION_NODE"
.SS "\s-1ELEMENT_DECL_NODE\s0"
.IX Subsection "ELEMENT_DECL_NODE"
.SS "\s-1ATT_DEF_NODE\s0"
.IX Subsection "ATT_DEF_NODE"
.SS "\s-1XML_DECL_NODE\s0"
.IX Subsection "XML_DECL_NODE"
.SS "\s-1ATTLIST_DECL_NODE\s0"
.IX Subsection "ATTLIST_DECL_NODE"
.SS "\s-1NAMESPACE_NODE\s0"
.IX Subsection "NAMESPACE_NODE"
XML::Tidy also exports:
.SS "\s-1STANDARD_XML_DECL\s0"
.IX Subsection "STANDARD_XML_DECL"
which returns a reasonable default \s-1XML\s0 declaration string
(assuming typical \*(L"utf\-8\*(R" encoding).
.SH "TODO"
.IX Header "TODO"
.IP "\- fix \fBreload()\fR from messing up Unicode escaped &XYZ; components like Copyright &#xA9; and Registered &#xAE; (probably needs pre and post processing)" 2
.IX Item "- fix reload() from messing up Unicode escaped &XYZ; components like Copyright &#xA9; and Registered &#xAE; (probably needs pre and post processing)"
.PD 0
.IP "\- write many better \s-1UTF\-8\s0 tests" 2
.IX Item "- write many better UTF-8 tests"
.IP "\- support namespaces" 2
.IX Item "- support namespaces"
.IP "\- handle \s-1CDATA\s0" 2
.IX Item "- handle CDATA"
.PD
.SH "CHANGES"
.IX Header "CHANGES"
Revision history for Perl extension XML::Tidy:
.IP "\- 1.20 H79M9hU8  Sun Jul  9 09:43:30:08 \-0500 2017" 2
.IX Item "- 1.20 H79M9hU8 Sun Jul 9 09:43:30:08 -0500 2017"
* removed broken Build.PL         to resolve <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=122406>. (Thank you,   Slaven.)
.IP "\- 1.18 H78M5qm1  Sat Jul  8 05:52:48:01 \-0500 2017" 2
.IX Item "- 1.18 H78M5qm1 Sat Jul 8 05:52:48:01 -0500 2017"
* fixed \fBnew()\fR to check file or xml to detect standalone in declaration, from <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=122389> (Thanks Alex!)
.Sp
* traced \fBtidy()\fR memory leak from <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=120296> (Thanks Jozef!) which seems to come from every XPath\->\fBfindnodes()\fR call
.Sp
* aligned synopsis comments
.Sp
* updated \fBwrite()\fR to use output encoding \s-1UTF\-8\s0 since that's what almost all \s-1XML\s0 should rely on (with thanks to \s-1RJBS\s0 for teaching me much from his great talk at
<HTTPS://YouTube.Com/watch?v=TmTeXcEixEg>)
.Sp
* collapsed trailing curly braces on code blocks
.Sp
* added croak for any failed file open attempt
.IP "\- 1.16 G6LM4EST  Tue Jun 21 04:14:28:29 \-0500 2016" 2
.IX Item "- 1.16 G6LM4EST Tue Jun 21 04:14:28:29 -0500 2016"
* stopped using my old fragile package generation and manually updated all distribution files (though Dist::Zilla should let me generate much again)
.Sp
* updated license to GPLv3+
.Sp
* fixed 00pod.t and 01podc.t to eval the Test modules from issue and patch: <\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=85592> (Thanks again MichielB.)
.Sp
* replaced all old '&&' with 'and' in \s-1POD\s0
.IP "\- 1.14 G6JMERCY  Sun Jun 19 14:27:12:34 \-0500 2016" 2
.IX Item "- 1.14 G6JMERCY Sun Jun 19 14:27:12:34 -0500 2016"
* separated old \s-1PT\s0 from \s-1VERSION\s0 to fix non-numeric issue: <\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=56073> (Thanks to Slaven.)
.Sp
* removed Unicode from \s-1POD\s0 but added encoding utf8 anyway to pass tests and resolve issues: <\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=92434> and
<\s-1HTTPS://RT.CPAN\s0.Org/Public/Bug/Display.html?id=85592> (Thanks to Sudhanshu and MichielB.)
.IP "\- 1.12.B55J2qn  Thu May  5 19:02:52:49 2011" 2
.IX Item "- 1.12.B55J2qn Thu May 5 19:02:52:49 2011"
* made \*(L"1.0\*(R" float binarize as float again, rather than just \*(L"1\*(R" int
.Sp
* cleaned up \s-1POD\s0 and fixed \s-1EXPORTED CONSTANTS\s0 heads blocking together
.IP "\- 1.10.B52FpLx  Mon May  2 15:51:21:59 2011" 2
.IX Item "- 1.10.B52FpLx Mon May 2 15:51:21:59 2011"
* added tests for undefined non-standard \s-1XML\s0 declaration to suppress warnings
.IP "\- 1.8.B2AMvdl  Thu Feb 10 22:57:39:47 2011" 2
.IX Item "- 1.8.B2AMvdl Thu Feb 10 22:57:39:47 2011"
* aligned .t code
.Sp
* added test for newline before \-r to try to resolve: <\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=65471> (Thanks, Leandro.)
.Sp
* fixed off-by-one error when new gets a readable (non-newline) filename (that's not \*(L"filename\*(R" without a pre\-'filename' param) to resolve:
<\s-1HTTPS://RT.CPAN\s0.Org/Ticket/Display.html?id=65151> (Thanks, Simone.)
.IP "\- 1.6.A7RJKwl  Tue Jul 27 19:20:58:47 2010" 2
.IX Item "- 1.6.A7RJKwl Tue Jul 27 19:20:58:47 2010"
* added head2 \s-1POD\s0 for \s-1EXPORTED CONSTANTS\s0 to try to pass t/00podc.t
.IP "\- 1.4.A7QCvHw  Mon Jul 26 12:57:17:58 2010" 2
.IX Item "- 1.4.A7QCvHw Mon Jul 26 12:57:17:58 2010"
* hacked a little test for non\-UTF\-8 decl str to resolve FrankGoss' need for \s-1ISO\-8859\-1\s0 decl encoding to persist through tidying
.Sp
* md sure \s-1META\s0.yml is being generated correctly for the \s-1CPAN\s0
.Sp
* updated license to GPLv3
.IP "\- 1.2.75BACCB  Fri May 11 10:12:12:11 2007" 2
.IX Item "- 1.2.75BACCB Fri May 11 10:12:12:11 2007"
* made \*(L"1.0\*(R" float binarize as just \*(L"1\*(R" int
.Sp
* made ints signed and bounds checked
.Sp
* added new('binary' => 'BinFilename.xtb') option
.IP "\- 1.2.54HJnFa  Sun Apr 17 19:49:15:36 2005" 2
.IX Item "- 1.2.54HJnFa Sun Apr 17 19:49:15:36 2005"
* fixed \fBtidy()\fR processing instruction stripping problem
.Sp
* added support for binary ints and floats in \fBbcompress()\fR
.Sp
* tightened up binary format and added pod
.IP "\- 1.2.54HDR1G  Sun Apr 17 13:27:01:16 2005" 2
.IX Item "- 1.2.54HDR1G Sun Apr 17 13:27:01:16 2005"
* added \fBbcompress()\fR and \fBbexpand()\fR
.Sp
* added  \fBcompress()\fR and  \fBexpand()\fR
.Sp
* added \fBtoString()\fR
.IP "\- 1.2.4CKBHxt  Mon Dec 20 11:17:59:55 2004" 2
.IX Item "- 1.2.4CKBHxt Mon Dec 20 11:17:59:55 2004"
* added exporting of XML::XPath::Node (\s-1DOM\s0) constants
.Sp
* added node object creation wrappers (like LibXML)
.IP "\- 1.2.4CCJW4G  Sun Dec 12 19:32:04:16 2004" 2
.IX Item "- 1.2.4CCJW4G Sun Dec 12 19:32:04:16 2004"
* added optional 'xpath_loc' => to \fBprune()\fR
.IP "\- 1.0.4CAJna1  Fri Dec 10 19:49:36:01 2004" 2
.IX Item "- 1.0.4CAJna1 Fri Dec 10 19:49:36:01 2004"
* added optional 'filename'  => to \fBwrite()\fR
.IP "\- 1.0.4CAAf5B  Fri Dec 10 10:41:05:11 2004" 2
.IX Item "- 1.0.4CAAf5B Fri Dec 10 10:41:05:11 2004"
* removed 2nd param from \fBtidy()\fR so that 1st param is just indent string
.Sp
* fixed pod errors
.IP "\- 1.0.4C9JpoP  Thu Dec  9 19:51:50:25 2004" 2
.IX Item "- 1.0.4C9JpoP Thu Dec 9 19:51:50:25 2004"
* added xplc option to \fBwrite()\fR
.Sp
* added \fBprune()\fR
.IP "\- 1.0.4C8K1Ah  Wed Dec  8 20:01:10:43 2004" 2
.IX Item "- 1.0.4C8K1Ah Wed Dec 8 20:01:10:43 2004"
* inherited from XPath so that those methods can be called directly
.Sp
* original version (separating Tidy.pm from Merge.pm)
.SH "INSTALL"
.IX Header "INSTALL"
From the command shell, please run:
.PP
.Vb 1
\&  \`perl \-MCPAN \-e "install XML::Tidy"\`
.Ve
.PP
or uncompress the package and run the standard:
.PP
.Vb 1
\&  \`perl Makefile.PL; make; make test; make install\`
.Ve
.SH "FILES"
.IX Header "FILES"
XML::Tidy requires:
.PP
Carp                  to allow errors to \fBcroak()\fR from calling sub
.PP
XML::XPath            to use XPath statements to query and update \s-1XML\s0
.PP
XML::XPath::XMLParser to parse \s-1XML\s0 documents into XPath objects
.PP
Math::BaseCnv         to handle base\-64 indexing for \fBcompress()\fR and \fBexpand()\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to   bug-XML-Tidy          at \s-1RT.CPAN\s0.Org, or through the web interface at
  <\s-1HTTPS://RT.CPAN\s0.Org/NoAuth/ReportBug.html?Queue=XML\-Tidy>.          I will be notified, and then you can be updated of progress on your bug
  as I address fixes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module (after it is installed) with the perldoc command.
.PP
.Vb 1
\&  \`perldoc XML::Tidy\`
.Ve
.PP
You can also look for information at:
.PP
.Vb 1
\&    RT: CPAN\*(Aqs Request Tracker
\&
\&  HTTPS://RT.CPAN.Org/NoAuth/Bugs.html?Dist=XML\-Tidy
\&
\&    AnnoCPAN: Annotated CPAN documentation
\&
\&  HTTP://AnnoCPAN.Org/dist/XML\-Tidy
\&
\&    CPAN Ratings
\&
\&  HTTPS://CPANRatings.Perl.Org/d/XML\-Tidy
\&
\&    Search CPAN
\&
\&  HTTP://Search.CPAN.Org/dist/XML\-Tidy
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
Most source code should be Free! Code I have lawful authority over is and shall be!
Copyright: (c) 2004\-2017, Pip Stuart.
Copyleft :  This software is licensed under the  \s-1GNU\s0 General Public License
  (version 3 or later). Please consult <\s-1HTTPS://GNU\s0.Org/licenses/gpl\-3.0.txt>
  for important information about your freedom. This is Free Software: you
  are free to change and redistribute it. There is \s-1NO WARRANTY,\s0 to the
  extent permitted by law. See <\s-1HTTPS://FSF\s0.Org> for further information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Pip Stuart <Pip@CPAN.Org>
